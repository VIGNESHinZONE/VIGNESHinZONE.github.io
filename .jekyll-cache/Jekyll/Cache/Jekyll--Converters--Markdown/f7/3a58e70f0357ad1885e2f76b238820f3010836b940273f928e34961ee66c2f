I" <h1 id="tutorial-33-physics-informed-neural-networks-using-jaxmodel--pinn_model">Tutorial 33: Physics Informed Neural Networks using JaxModel &amp; PINN_Model</h1>
<ul>
  <li><a href="https://github.com/VIGNESHinZONE">Vignesh Venkataraman</a></li>
</ul>

<h2 id="contents">Contents</h2>

<ul>
  <li>Physics Informed Neural Networks</li>
  <li>Setup</li>
  <li>Brief about Jax and Autodiff</li>
  <li>Burgerâ€™s Equation</li>
  <li>Data Visualisation</li>
  <li>Explanation of the Solution using Jax</li>
  <li>Usage of PINN Model</li>
  <li>Visualize the final results</li>
</ul>

<p>#Physics Informed Neural Networks</p>

<p>PINNs was introduced by Maziar Raissi et. al in their paper <a href="https://arxiv.org/abs/1711.10561">Physics Informed Deep Learning (Part I): Data-driven
Solutions of Nonlinear Partial Differential Equations</a> which are used for solving supervised learning tasks and also follow an underlying differential equation derived from understanding the Physics. In more simple terms, we try solving a differential equation with a neural network and using the differential equation as the regulariser in the loss function.</p>

<hr />

<h3 id="here-is-an-illustration-of-pinns-using-a-simple-differential-equation-">Here is an illustration of PINNs using a simple differential equation-</h3>

<p>\(\quad \frac{df}{dt} = f(u, t),\) where initial condition is \(\ \ u(t=0) = u_0\)</p>

<p>We approximate function \(u(t)\) using a Neural Network as \(NN(t)\) and apply the following loss function -</p>

<p>Initial Loss: \(\quad  L_0 = (NN(t=0) - u_0)^2\)</p>

<p>Regulariser Loss:= \(\quad L_r =  \frac{dNN(t)}{dt} - f(NN(t),t)\)</p>

<p>And we minimise the \(Total Loss\) using Backpropagation-</p>

<p>Total Loss = Initial Loss + Regulariser Loss</p>

<h3 id="here-is-a-technical-definition-of-pinns-taken-from-the-authors-official-blog-">Here is a technical definition of PINNs taken from the authorâ€™s official blog-</h3>

\[\quad \quad u_t + \mathcal{N}[u] = 0, x \in \Omega, t\in[0,T],\]

<p>where \(u(t,x)\) denotes the latent (hidden) solution, \(N[â‹…]\) is a nonlinear differential operator, and \(Î©\) is a subset of \(\mathbb{R}^D\) , and proceed by approximating \(u(t,x)\) by a deep neural network. We define \(f(t,x)\) to be given by</p>

\[\quad \quad f := u_t + \mathcal{N}[u],\]

<p>This assumption results in a physics informed neural network \(f(t,x)\). This network can be derived by the calculus on computational graphs: Backpropagation.</p>

<hr />

<h3 id="useful-resources-to-learn-more-about-pinns">Useful Resources to learn more about PINNs</h3>

<ul>
  <li><a href="https://maziarraissi.github.io/PINNs/">Maziar Raissi et. al. official blog on PINNs</a></li>
  <li><a href="https://github.com/mitmath/18337#lecture-3-introduction-to-scientific-machine-learning-through-physics-informed-neural-networks">Chris Rackauckasâ€™s lecture on PINNs lecture 3</a>: these lectures are in Julia programming language but still are a great source of learning.</li>
</ul>

<h1 id="setup">Setup</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">### In case if you are running this notebook in Local Machine and have CUDA installed then uncomment this below line. ###
### Change the cuda version depending on your setup. Here Cuda 11.x is represented as `cuda111`
# !pip install --upgrade pip
# !pip install --upgrade "jax[cuda111]" -f https://storage.googleapis.com/jax-releases/jax_releases.html
</span><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">deepchem</span><span class="p">[</span><span class="n">jax</span><span class="p">]</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">pyDOE</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Collecting deepchem[jax]
  Downloading deepchem-2.5.0-py3-none-any.whl (552 kB)
[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 552 kB 5.4 MB/s 
[33mWARNING: deepchem 2.5.0 does not provide the extra 'jax'[0m
[?25hRequirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from deepchem[jax]) (1.0.1)
Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from deepchem[jax]) (1.1.5)
Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from deepchem[jax]) (1.4.1)
Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from deepchem[jax]) (1.19.5)
Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from deepchem[jax]) (0.22.2.post1)
Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;deepchem[jax]) (2.8.2)
Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas-&gt;deepchem[jax]) (2018.9)
Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil&gt;=2.7.3-&gt;pandas-&gt;deepchem[jax]) (1.15.0)
Installing collected packages: deepchem
Successfully installed deepchem-2.5.0
Collecting pyDOE
  Downloading pyDOE-0.3.8.zip (22 kB)
Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from pyDOE) (1.19.5)
Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from pyDOE) (1.4.1)
Building wheels for collected packages: pyDOE
  Building wheel for pyDOE (setup.py) ... [?25l[?25hdone
  Created wheel for pyDOE: filename=pyDOE-0.3.8-py3-none-any.whl size=18184 sha256=4da795f38a3c13631115b175ca51b0cca2ebc9226d122d2f90ddf4975609baaf
  Stored in directory: /root/.cache/pip/wheels/83/ce/8a/87b25c685bfeca1872d13b8dc101e087a9c6e3fb5ebb47022a
Successfully built pyDOE
Installing collected packages: pyDOE
Successfully installed pyDOE-0.3.8
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">deepchem</span> <span class="k">as</span> <span class="n">dc</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">PINNs_URL</span> <span class="o">=</span> <span class="s">"https://deepchemdata.s3.us-west-1.amazonaws.com/datasets/raissi_pinns_data.tar.gz"</span>
<span class="n">dc</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data_utils</span><span class="p">.</span><span class="n">download_url</span><span class="p">(</span>
    <span class="n">url</span><span class="o">=</span><span class="n">PINNs_URL</span><span class="p">,</span> <span class="n">dest_dir</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">())</span>
<span class="n">targz_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">'raissi_pinns_data.tar.gz'</span><span class="p">)</span>
<span class="n">dc</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data_utils</span><span class="p">.</span><span class="n">untargz_file</span><span class="p">(</span><span class="n">targz_file</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">())</span>


</code></pre></div></div>

<h1 id="brief-about-jax-and-autodiff">Brief about Jax and Autodiff</h1>

<ul>
  <li>Mention the usage of jax and its functional style</li>
  <li>Mention about the Autodiff cookbook from Jax</li>
  <li>Asking them to take a look at Haiku and optax library</li>
  <li>About the JaxModel and PINN_Model superclass</li>
</ul>

<p>Deepchem has recently introduced Jax support for building models and <code class="language-plaintext highlighter-rouge">JaxModel</code> superclass is the main API for building</p>

<h1 id="burgers-equation">Burgers Equation</h1>

<p>Burgersâ€™ equation is a partial differential equation that was originally proposed as a simplified model of turbulence as exhibited by the full-fledged Navier-Stokes equations. It is a nonlinear equation for which exact solutions are known and is therefore important as a benchmark problem for numerical methods. <a href="https://www.azimuthproject.org/azimuth/show/Burgers%27+equation">More Refrence</a></p>

<p>Here is the differential Equation we are trying to solve</p>

\[\begin{array}{l}
  \ \ \ u_t + u u_x - (0.01/\pi) u_{xx} = 0,\ \ \ x \in [-1,1],\ \ \ t \in [0,1]
  \end{array}\]

<p>Here are the initial conditions</p>

\[\ \ \ u(x, 0) = -\sin(\pi x),\]

\[\ \ \ u(-1, t) = u(1, t) = 0.0\]

<p>Now let us define:</p>

\[\ \ \ f := u_t + u u_x - (0.01/\pi) u_{xx},\]

<p>and we approximate \(u(x, t)\) using Neural Network as \(NN(\theta, x, t)\) where \(\theta\) are the weights of neural networks</p>

<hr />

<p>Now here are the three main data points that will be used for training our Neural Network to approximate \(u(x,t)\)</p>

<ul>
  <li>
    <p>We will train points lying between \(x \in [-1,1]\) and \(t=0\) to follow as part of the L2 Loss</p>

\[\begin{array}{l}
  min_\theta _(NN(\theta, x, t) + \sin(\pix))^2 
  \end{array}\]
  </li>
  <li>
    <p>We will train points lying between \(t \in [0,1]\) and \(x= \pm1\) as part of the L2 Loss</p>

\[\min\limits_{\theta} (NN(\theta, x, t) + \sin(\pi x))^2\]
  </li>
</ul>

<ol>
  <li>We will train points lying between \(x \in [-1,1], \quad t \in [0,1]\) as part of the regulariser loss</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$$f(\theta, x, t):= \quad \frac{\partial NN(\theta, x, t)}{\partial t} + NN(\theta, x, t)\frac{\partial NN(\theta, x, t)}{\partial x} - (0.01/\pi)\frac{\partial^2 NN(\theta, x, t)}{\partial^2 x} $$

$$min \quad _\theta \quad f(\theta, x, t)$$
</code></pre></div></div>

<p>&lt;/br&gt;</p>

<p>In this tutorial, we will be combing data conditions 1 and 2 under the same L2Loss</p>

<h1 id="data-visualisation-of-the-burgers-equation">Data Visualisation of the Burgers Equation</h1>

<p>Now lets load the Burgerâ€™s Data provided from the author. <code class="language-plaintext highlighter-rouge">pre_process_shock_data </code> is used to load the data in a format suitable for Neural Networks. Understanding this function is not neccesary for working through the tutorials.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Data Preprocessing
</span>
<span class="c1"># Create Dataset
</span>
<span class="kn">import</span> <span class="nn">scipy.io</span>
<span class="kn">from</span> <span class="nn">scipy.interpolate</span> <span class="kn">import</span> <span class="n">griddata</span>
<span class="kn">from</span> <span class="nn">pyDOE</span> <span class="kn">import</span> <span class="n">lhs</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">pre_process_shock_data</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>

  <span class="n">N_u</span> <span class="o">=</span> <span class="mi">100</span>
  <span class="n">N_f</span> <span class="o">=</span> <span class="mi">10000</span>

  <span class="n">t</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'t'</span><span class="p">].</span><span class="n">flatten</span><span class="p">()[:,</span><span class="bp">None</span><span class="p">]</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'x'</span><span class="p">].</span><span class="n">flatten</span><span class="p">()[:,</span><span class="bp">None</span><span class="p">]</span>
  <span class="n">Exact</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">real</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'usol'</span><span class="p">]).</span><span class="n">T</span>

  <span class="n">X</span><span class="p">,</span> <span class="n">T</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">t</span><span class="p">)</span>

  <span class="n">X_star</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">X</span><span class="p">.</span><span class="n">flatten</span><span class="p">()[:,</span><span class="bp">None</span><span class="p">],</span> <span class="n">T</span><span class="p">.</span><span class="n">flatten</span><span class="p">()[:,</span><span class="bp">None</span><span class="p">]))</span>
  <span class="n">u_star</span> <span class="o">=</span> <span class="n">Exact</span><span class="p">.</span><span class="n">flatten</span><span class="p">()[:,</span><span class="bp">None</span><span class="p">]</span>              

  <span class="c1"># Doman bounds
</span>  <span class="n">lb</span> <span class="o">=</span> <span class="n">X_star</span><span class="p">.</span><span class="nb">min</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="n">ub</span> <span class="o">=</span> <span class="n">X_star</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>    

  <span class="n">xx1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,:].</span><span class="n">T</span><span class="p">,</span> <span class="n">T</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,:].</span><span class="n">T</span><span class="p">))</span>
  <span class="n">uu1</span> <span class="o">=</span> <span class="n">Exact</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">,:].</span><span class="n">T</span>
  <span class="n">xx2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">],</span> <span class="n">T</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]))</span>
  <span class="n">uu2</span> <span class="o">=</span> <span class="n">Exact</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span>
  <span class="n">xx3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">X</span><span class="p">[:,</span><span class="o">-</span><span class="mi">1</span><span class="p">:],</span> <span class="n">T</span><span class="p">[:,</span><span class="o">-</span><span class="mi">1</span><span class="p">:]))</span>
  <span class="n">uu3</span> <span class="o">=</span> <span class="n">Exact</span><span class="p">[:,</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span>

  <span class="n">X_u_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">xx1</span><span class="p">,</span> <span class="n">xx2</span><span class="p">,</span> <span class="n">xx3</span><span class="p">])</span>
  <span class="n">X_f_train</span> <span class="o">=</span> <span class="n">lb</span> <span class="o">+</span> <span class="p">(</span><span class="n">ub</span><span class="o">-</span><span class="n">lb</span><span class="p">)</span><span class="o">*</span><span class="n">lhs</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">N_f</span><span class="p">)</span>
  <span class="n">X_f_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">X_f_train</span><span class="p">,</span> <span class="n">X_u_train</span><span class="p">))</span>
  <span class="n">u_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">uu1</span><span class="p">,</span> <span class="n">uu2</span><span class="p">,</span> <span class="n">uu3</span><span class="p">])</span>

  <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">X_u_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">N_u</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="n">X_u_train</span> <span class="o">=</span> <span class="n">X_u_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="p">:]</span>
  <span class="n">u_train</span> <span class="o">=</span> <span class="n">u_train</span><span class="p">[</span><span class="n">idx</span><span class="p">,:]</span>
  <span class="k">return</span> <span class="n">X_u_train</span><span class="p">,</span> <span class="n">u_train</span><span class="p">,</span> <span class="n">X_f_train</span><span class="p">,</span> <span class="n">X_star</span>

<span class="n">mat_data</span> <span class="o">=</span> <span class="n">scipy</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">loadmat</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getcwd</span><span class="p">(),</span> <span class="s">'PINNs/burgers_shock.mat'</span><span class="p">))</span>
<span class="n">labeled_X</span><span class="p">,</span> <span class="n">labeled_y</span><span class="p">,</span> <span class="n">unlabeled_X</span><span class="p">,</span> <span class="n">full_domain</span> <span class="o">=</span> <span class="n">pre_process_shock_data</span><span class="p">(</span><span class="n">mat_data</span><span class="p">)</span>
</code></pre></div></div>

<p>We have three Numpy arrays <code class="language-plaintext highlighter-rouge">labeled_X</code>, <code class="language-plaintext highlighter-rouge">labeled_y</code> and <code class="language-plaintext highlighter-rouge">unlabeled_X</code> which will be used for training our neural network,</p>

<p>1) <code class="language-plaintext highlighter-rouge">labeled_X</code> consists of  \(x \in [-1,1]\) &amp; \(t=0\) and \(t \in [0,1]\) &amp; \(x= \pm1\). <code class="language-plaintext highlighter-rouge">labeled_y</code> has the value of \(u(x, t)\):</p>

<p>Let us verify that <code class="language-plaintext highlighter-rouge">labeled_X</code> &amp; <code class="language-plaintext highlighter-rouge">labeled_y</code> also consists of data points satisfying the condition of</p>

<p>\(\ \ \ u(x, 0) = -\sin(\pi x), \quad \quad x \in [-1,1]\) &amp; \(t=0\)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">ind</span> <span class="o">=</span> <span class="n">labeled_X</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mf">0.0</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Number of Datapoints with with t = 0 is </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">labeled_X</span><span class="p">[</span><span class="n">labeled_X</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mf">0.0</span><span class="p">])</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">labeled_X</span><span class="p">[</span><span class="n">ind</span><span class="p">][:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">labeled_y</span><span class="p">[</span><span class="n">ind</span><span class="p">],</span> <span class="n">color</span> <span class="o">=</span> <span class="s">'red'</span><span class="p">,</span> <span class="n">marker</span> <span class="o">=</span> <span class="s">"o"</span><span class="p">,</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.collections.PathCollection at 0x7f721a00b390&gt;
</code></pre></div></div>

<p><img src="output_10_1.png" alt="png" /></p>

<p>Let us verify that at <code class="language-plaintext highlighter-rouge">labeled_X</code> &amp; <code class="language-plaintext highlighter-rouge">labeled_y</code> also consists of datapoints satisfying the condition of</p>

<p>\(\ \ \ u(-1, t) = u(1, t) = 0.0, \quad \quad t \in [0,1]\) &amp; \(x= \pm1\)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ind</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">labeled_X</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mf">1.0</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Number of Datapoints with with |x| = 1 is </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">labeled_X</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">labeled_X</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mf">1.0</span><span class="p">])</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">labeled_y</span><span class="p">[</span><span class="n">ind</span><span class="p">]),</span> <span class="n">np</span><span class="p">.</span><span class="nb">min</span><span class="p">(</span><span class="n">labeled_y</span><span class="p">[</span><span class="n">ind</span><span class="p">]),</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">labeled_y</span><span class="p">[</span><span class="n">ind</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(2.326502818752141e-16, -1.0854441803149965e-16, 8.236830416577723e-17)
</code></pre></div></div>

<h1 id="explanation-of-the-solution">Explanation of the solution</h1>

<p>We will be using Deepchemâ€™s <code class="language-plaintext highlighter-rouge">PINNModel</code> class to solve Burgerâ€™s Equation which is based out of <code class="language-plaintext highlighter-rouge">Jax</code> library. We will approximate \(u(x, t)\) using a Neural Network represented as \(NN(\theta, x, t)\)</p>

<p>For our purpose, we will be using the Haiku library for building neural networks. Due to the functional nature of Jax, we define neural network with two things</p>

<ul>
  <li>Parameters - which act as the weight matrices, upon which Backpropagation is applied for optimisation.</li>
  <li>forward_fn - This defines how the weights are used for computing the outputs. Ex- Feedforward, Convolution, etc</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">jax</span>
<span class="kn">import</span> <span class="nn">jax.numpy</span> <span class="k">as</span> <span class="n">jnp</span>
<span class="kn">import</span> <span class="nn">haiku</span> <span class="k">as</span> <span class="n">hk</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="n">hstack</span><span class="p">([</span><span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">])</span>
  <span class="n">net</span> <span class="o">=</span> <span class="n">hk</span><span class="p">.</span><span class="n">nets</span><span class="p">.</span><span class="n">MLP</span><span class="p">(</span><span class="n">output_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
                    <span class="n">activation</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="n">tanh</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">net</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>


<span class="n">init_params</span><span class="p">,</span> <span class="n">forward_fn</span> <span class="o">=</span> <span class="n">hk</span><span class="p">.</span><span class="n">transform</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="n">rng</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">PRNGKey</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
<span class="n">x_init</span><span class="p">,</span> <span class="n">t_init</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">X_u_train</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">params</span> <span class="o">=</span> <span class="n">init_params</span><span class="p">(</span><span class="n">rng</span><span class="p">,</span> <span class="n">x_init</span><span class="p">,</span> <span class="n">t_init</span><span class="p">)</span>

</code></pre></div></div>

<p>As per the docstrings of PINNModel, we require two additional functions in the given format -</p>

<ol>
  <li>Create a gradient_fn which tells us about how to compute the gradients of the function-
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &gt;&gt;&gt;
  &gt;&gt; def gradient_fn(forward_fn, loss_outputs, initial_data):
  &gt;&gt;  def model_loss(params, target, weights, rng, ...):
  &gt;&gt;    # write code using the arguments.
  &gt;&gt;    # ... indicates the variable number of positional arguments.
  &gt;&gt;    return
  &gt;&gt;  return model_loss
</code></pre></div>    </div>
  </li>
</ol>

<p>And to understand more about PINNModel, you can see that the same gradient_fn gets called in the code for computing the gradients.</p>

<p>For our purpose, we have two variables \((x, t)\) and we need to tell the PINN Model how to compute the final gradient. For carrying out this process we will be using these main features from jax library for calculating the loss -</p>

<ol>
  <li><a href="https://jax.readthedocs.io/en/latest/jax-101/03-vectorization.html">vmap</a> - This for parallelising computations in batches. We will process each row of the dataset, but it will get batched automatically using this feature.</li>
  <li><a href="https://jax.readthedocs.io/en/latest/notebooks/autodiff_cookbook.html#jacobians-and-hessians-using-jacfwd-and-jacrev">jacrev</a> - This is used to calculate the jacobian matrix. In our case, the output is a single dimension and hence it can be thought of as the gradient function. We could directly use jaxâ€™s <a href="https://jax.readthedocs.io/en/latest/jax-101/01-jax-basics.html?highlight=grad#jax-first-transformation-grad">grad</a> function but using <code class="language-plaintext highlighter-rouge">jacrev</code> simplifies the array shapes and hence is easier.</li>
</ol>

<p>We need to compute two losses for solving our differential equation-</p>

<ol>
  <li>Initial Loss</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>u_pred = forward_fn(params, rng, x_b, t_b)
initial_loss = jnp.mean((u_pred - boundary_target) ** 2)
</code></pre></div></div>

<ol>
  <li>Regulariser Loss</li>
</ol>

<p>This is slightly complicated as we need to compute</p>

\[f(\theta, x, t):= \ \ \frac{\partial NN(\theta, x, t)}{\partial t} + NN(\theta, x, t)\frac{\partial NN(\theta, x, t)}{\partial x} - (0.01/\pi)\frac{\partial^2 NN(\theta, x, t)}{\partial^2 x}\]

<p>The partial derivative operation in the first and second terms can be calculated using <code class="language-plaintext highlighter-rouge">jacrev</code> function-</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>u_x, u_t = jacrev(forward_fn, argnums=(2, 3))(params, rng, x, t)
</code></pre></div></div>

<p>The second partial derivative operation in the third term can be applying <code class="language-plaintext highlighter-rouge">jacrev</code> twice-</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>u_xx = jacrev(jacrev(forward_fn, argnums=2), argnums=2)(params, rng, x, t)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">jax</span> <span class="kn">import</span> <span class="n">jit</span><span class="p">,</span> <span class="n">vmap</span><span class="p">,</span> <span class="n">jacrev</span>

<span class="k">def</span> <span class="nf">gradient_fn</span><span class="p">(</span><span class="n">forward_fn</span><span class="p">,</span> <span class="n">loss_outputs</span><span class="p">,</span> <span class="n">initial_data</span><span class="p">):</span>
  <span class="s">"""
  This function calls the gradient function, to implement the backpropogation
  """</span>
  <span class="n">boundary_data_x</span> <span class="o">=</span> <span class="n">initial_data</span><span class="p">[</span><span class="s">'labeled_x'</span><span class="p">]</span>
  <span class="n">boundary_data_t</span> <span class="o">=</span> <span class="n">initial_data</span><span class="p">[</span><span class="s">'labeled_t'</span><span class="p">]</span>

  <span class="n">boundary_target</span> <span class="o">=</span> <span class="n">initial_data</span><span class="p">[</span><span class="s">'labeled_u'</span><span class="p">]</span>

  <span class="o">@</span><span class="n">jax</span><span class="p">.</span><span class="n">jit</span>
  <span class="k">def</span> <span class="nf">model_loss</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">weights</span><span class="p">,</span> <span class="n">rng</span><span class="p">,</span> <span class="n">x_train</span><span class="p">,</span> <span class="n">t_train</span><span class="p">):</span>

    <span class="o">@</span><span class="n">functools</span><span class="p">.</span><span class="n">partial</span><span class="p">(</span><span class="n">jax</span><span class="p">.</span><span class="n">vmap</span><span class="p">,</span> <span class="n">in_axes</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
    <span class="k">def</span> <span class="nf">small_loss</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
      <span class="n">u</span> <span class="o">=</span> <span class="n">forward_fn</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">rng</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
      <span class="n">u_x</span><span class="p">,</span> <span class="n">u_t</span> <span class="o">=</span> <span class="n">jacrev</span><span class="p">(</span><span class="n">forward_fn</span><span class="p">,</span> <span class="n">argnums</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))(</span><span class="n">params</span><span class="p">,</span> <span class="n">rng</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
      <span class="n">u_xx</span> <span class="o">=</span> <span class="n">jacrev</span><span class="p">(</span><span class="n">jacrev</span><span class="p">(</span><span class="n">forward_fn</span><span class="p">,</span> <span class="n">argnums</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span> <span class="n">argnums</span><span class="o">=</span><span class="mi">2</span><span class="p">)(</span><span class="n">params</span><span class="p">,</span> <span class="n">rng</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
      <span class="n">con</span> <span class="o">=</span> <span class="mf">0.01</span><span class="o">/</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span>
      <span class="k">return</span> <span class="n">u_t</span> <span class="o">+</span> <span class="n">u</span> <span class="o">*</span> <span class="n">u_x</span> <span class="o">-</span> <span class="n">con</span> <span class="o">*</span> <span class="n">u_xx</span>

    <span class="n">u_pred</span> <span class="o">=</span> <span class="n">forward_fn</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">rng</span><span class="p">,</span> <span class="n">boundary_data_x</span><span class="p">,</span> <span class="n">boundary_data_t</span><span class="p">)</span>
    <span class="n">f_pred</span> <span class="o">=</span> <span class="n">small_loss</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">x_train</span><span class="p">,</span> <span class="n">t_train</span><span class="p">)</span>
    <span class="n">loss_u</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="n">mean</span><span class="p">((</span><span class="n">u_pred</span> <span class="o">-</span> <span class="n">boundary_target</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">loss_f</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="n">mean</span><span class="p">((</span><span class="n">f_pred</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">loss_u</span> <span class="o">+</span> <span class="n">loss_f</span>

  <span class="k">return</span> <span class="n">model_loss</span>


</code></pre></div></div>

<ol>
  <li>We also need to provide an eval_fn in the below-given format for computing the weights
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &gt;&gt;&gt;
  &gt;&gt; def create_eval_fn(forward_fn, params):
  &gt;&gt;  def eval_model(..., rng=None):
  &gt;&gt;    # write code here using arguments
  &gt;&gt;
  &gt;&gt;    return
  &gt;&gt;  return eval_model
</code></pre></div>    </div>
  </li>
</ol>

<p>Like previously we have two arguments for our model \((x, t)\) which get passed in function</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Tells the neural network on how to perform calculation during inference
</span><span class="k">def</span> <span class="nf">create_eval_fn</span><span class="p">(</span><span class="n">forward_fn</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
  <span class="s">"""
  Calls the function to evaluate the model
  """</span>
  <span class="o">@</span><span class="n">jax</span><span class="p">.</span><span class="n">jit</span>
  <span class="k">def</span> <span class="nf">eval_model</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">rng</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>

    <span class="n">res</span> <span class="o">=</span> <span class="n">forward_fn</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">rng</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">jnp</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">eval_model</span>

</code></pre></div></div>

<h1 id="usage-of-pinn-model">Usage of PINN Model</h1>

<p>We will be using optax library for performing the optimisations. PINNModel executes the codes for training the models.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">optax</span>
<span class="n">scheduler</span> <span class="o">=</span> <span class="n">optax</span><span class="p">.</span><span class="n">piecewise_constant_schedule</span><span class="p">(</span>
    <span class="n">init_value</span><span class="o">=</span><span class="mf">1e-2</span><span class="p">,</span> 
    <span class="n">boundaries_and_scales</span><span class="o">=</span><span class="p">{</span><span class="mi">5000</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">10000</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">15000</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">})</span>

<span class="n">opt</span> <span class="o">=</span> <span class="n">optax</span><span class="p">.</span><span class="n">chain</span><span class="p">(</span>
    <span class="n">optax</span><span class="p">.</span><span class="n">clip_by_global_norm</span><span class="p">(</span><span class="mf">1.00</span><span class="p">),</span>
    <span class="n">optax</span><span class="p">.</span><span class="n">scale_by_adam</span><span class="p">(</span><span class="n">b1</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">b2</span><span class="o">=</span><span class="mf">0.99</span><span class="p">),</span>
    <span class="n">optax</span><span class="p">.</span><span class="n">scale_by_schedule</span><span class="p">(</span><span class="n">scheduler</span><span class="p">),</span>
    <span class="n">optax</span><span class="p">.</span><span class="n">scale</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">))</span>

<span class="n">labeled_x</span><span class="p">,</span> <span class="n">labeled_t</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">labeled_X</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">boundary_data</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'labeled_x'</span><span class="p">:</span> <span class="n">labeled_x</span><span class="p">,</span> <span class="s">'labeled_t'</span><span class="p">:</span><span class="n">labeled_t</span><span class="p">,</span> <span class="s">'labeled_u'</span><span class="p">:</span> <span class="n">labeled_y</span>
<span class="p">}</span>

  <span class="n">boundary_data_x</span> <span class="o">=</span> <span class="n">initial_data</span><span class="p">[</span><span class="s">'labeled_x'</span><span class="p">]</span>
  <span class="n">boundary_data_t</span> <span class="o">=</span> <span class="n">initial_data</span><span class="p">[</span><span class="s">'labeled_t'</span><span class="p">]</span>

  <span class="n">boundary_target</span> <span class="o">=</span> <span class="n">initial_data</span><span class="p">[</span><span class="s">'labeled_u'</span><span class="p">]</span>

<span class="n">j_m</span> <span class="o">=</span> <span class="n">PINN_Model</span><span class="p">(</span>      
    <span class="n">forward_fn</span> <span class="o">=</span> <span class="n">forward_fn</span><span class="p">,</span>
    <span class="n">params</span> <span class="o">=</span> <span class="n">params</span><span class="p">,</span>
    <span class="n">boundary_data</span> <span class="o">=</span> <span class="n">boundary_data</span><span class="p">,</span>
    <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="n">opt</span><span class="p">,</span>
    <span class="n">grad_fn</span> <span class="o">=</span> <span class="n">gradient_fn</span><span class="p">,</span>
    <span class="n">eval_fn</span> <span class="o">=</span> <span class="n">create_eval_fn</span><span class="p">,</span>
    <span class="n">deterministic</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">log_frequency</span> <span class="o">=</span> <span class="mi">1000</span>
    <span class="p">)</span>

<span class="n">dataset</span> <span class="o">=</span> <span class="n">dc</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">NumpyDataset</span><span class="p">(</span><span class="n">unlabeled_X</span><span class="p">)</span>
<span class="n">val</span> <span class="o">=</span> <span class="n">j_m</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">nb_epochs</span><span class="o">=</span><span class="mi">4000</span><span class="p">)</span>

</code></pre></div></div>

<h1 id="visualize-the-final-results">Visualize the final results</h1>

<ul>
  <li>Code taken from authors for visualisation</li>
  <li>show both graphs</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_dataset</span> <span class="o">=</span> <span class="n">dc</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">NumpyDataset</span><span class="p">(</span><span class="n">full_domain</span><span class="p">)</span>
<span class="n">u_pred</span> <span class="o">=</span> <span class="n">j_m</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">)</span>
<span class="n">U_pred</span> <span class="o">=</span> <span class="n">griddata</span><span class="p">(</span><span class="n">X_star</span><span class="p">,</span> <span class="n">u_pred</span><span class="p">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">T</span><span class="p">),</span> <span class="n">method</span><span class="o">=</span><span class="s">'cubic'</span><span class="p">)</span>
<span class="n">Error</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">Exact</span> <span class="o">-</span> <span class="n">U_pred</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">scipy.io</span>
<span class="kn">from</span> <span class="nn">scipy.interpolate</span> <span class="kn">import</span> <span class="n">griddata</span>
<span class="kn">from</span> <span class="nn">mpl_toolkits.axes_grid1</span> <span class="kn">import</span> <span class="n">make_axes_locatable</span>
<span class="kn">import</span> <span class="nn">matplotlib.gridspec</span> <span class="k">as</span> <span class="n">gridspec</span>


<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>

<span class="n">h</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">U_pred</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'rainbow'</span><span class="p">,</span> 
              <span class="n">extent</span><span class="o">=</span><span class="p">[</span><span class="n">t</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">t</span><span class="p">.</span><span class="nb">max</span><span class="p">(),</span> <span class="n">x</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">x</span><span class="p">.</span><span class="nb">max</span><span class="p">()],</span> 
              <span class="n">origin</span><span class="o">=</span><span class="s">'lower'</span><span class="p">,</span> <span class="n">aspect</span><span class="o">=</span><span class="s">'auto'</span><span class="p">)</span>
<span class="n">divider</span> <span class="o">=</span> <span class="n">make_axes_locatable</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>
<span class="n">cax</span> <span class="o">=</span> <span class="n">divider</span><span class="p">.</span><span class="n">append_axes</span><span class="p">(</span><span class="s">"right"</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="s">"5%"</span><span class="p">,</span> <span class="n">pad</span><span class="o">=</span><span class="mf">0.10</span><span class="p">)</span>
<span class="n">cbar</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">cax</span><span class="o">=</span><span class="n">cax</span><span class="p">)</span>
<span class="n">cbar</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span> 

<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span>
    <span class="n">X_u_train</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> 
    <span class="n">X_u_train</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> 
    <span class="s">'kx'</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'Data (%d points)'</span> <span class="o">%</span> <span class="p">(</span><span class="n">u_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> 
    <span class="n">markersize</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>  <span class="c1"># marker size doubled
</span>    <span class="n">clip_on</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">alpha</span><span class="o">=</span><span class="mf">1.0</span>
<span class="p">)</span>

<span class="n">line</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nb">min</span><span class="p">(),</span> <span class="n">x</span><span class="p">.</span><span class="nb">max</span><span class="p">(),</span> <span class="mi">2</span><span class="p">)[:,</span><span class="bp">None</span><span class="p">]</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">25</span><span class="p">]</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span> <span class="n">line</span><span class="p">,</span> <span class="s">'w-'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">50</span><span class="p">]</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span> <span class="n">line</span><span class="p">,</span> <span class="s">'w-'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">75</span><span class="p">]</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span> <span class="n">line</span><span class="p">,</span> <span class="s">'w-'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'$t$'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'$x$'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span>
    <span class="n">loc</span><span class="o">=</span><span class="s">'upper center'</span><span class="p">,</span> 
    <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">0.9</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.05</span><span class="p">),</span> 
    <span class="n">ncol</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> 
    <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> 
    <span class="n">prop</span><span class="o">=</span><span class="p">{</span><span class="s">'size'</span><span class="p">:</span> <span class="mi">15</span><span class="p">}</span>
<span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'$u(t,x)$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span> <span class="c1"># font size doubled
</span><span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>


<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">111</span><span class="p">)</span>

<span class="n">gs1</span> <span class="o">=</span> <span class="n">gridspec</span><span class="p">.</span><span class="n">GridSpec</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">gs1</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">top</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="mf">1.0</span><span class="o">/</span><span class="mf">3.0</span><span class="o">-</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">bottom</span><span class="o">=</span><span class="mf">1.0</span><span class="o">-</span><span class="mf">2.0</span><span class="o">/</span><span class="mf">3.0</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">wspace</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="n">gs1</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">Exact</span><span class="p">[</span><span class="mi">25</span><span class="p">,:],</span> <span class="s">'b-'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'Exact'</span><span class="p">)</span>       
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">U_pred</span><span class="p">[</span><span class="mi">25</span><span class="p">,:],</span> <span class="s">'r--'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'Prediction'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'$x$'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'$u(t,x)$'</span><span class="p">)</span>    
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'$t = 0.25$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'square'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.1</span><span class="p">,</span><span class="mf">1.1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.1</span><span class="p">,</span><span class="mf">1.1</span><span class="p">])</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="p">([</span><span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">,</span> <span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">]</span> <span class="o">+</span>
             <span class="n">ax</span><span class="p">.</span><span class="n">get_xticklabels</span><span class="p">()</span> <span class="o">+</span> <span class="n">ax</span><span class="p">.</span><span class="n">get_yticklabels</span><span class="p">()):</span>
    <span class="n">item</span><span class="p">.</span><span class="n">set_fontsize</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="n">gs1</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">Exact</span><span class="p">[</span><span class="mi">50</span><span class="p">,:],</span> <span class="s">'b-'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'Exact'</span><span class="p">)</span>       
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">U_pred</span><span class="p">[</span><span class="mi">50</span><span class="p">,:],</span> <span class="s">'r--'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'Prediction'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'$x$'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'$u(t,x)$'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'square'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.1</span><span class="p">,</span><span class="mf">1.1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.1</span><span class="p">,</span><span class="mf">1.1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'$t = 0.50$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span>
    <span class="n">loc</span><span class="o">=</span><span class="s">'upper center'</span><span class="p">,</span> 
    <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.15</span><span class="p">),</span> 
    <span class="n">ncol</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> 
    <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> 
    <span class="n">prop</span><span class="o">=</span><span class="p">{</span><span class="s">'size'</span><span class="p">:</span> <span class="mi">15</span><span class="p">}</span>
<span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="p">([</span><span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">,</span> <span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">]</span> <span class="o">+</span>
             <span class="n">ax</span><span class="p">.</span><span class="n">get_xticklabels</span><span class="p">()</span> <span class="o">+</span> <span class="n">ax</span><span class="p">.</span><span class="n">get_yticklabels</span><span class="p">()):</span>
    <span class="n">item</span><span class="p">.</span><span class="n">set_fontsize</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="n">gs1</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">Exact</span><span class="p">[</span><span class="mi">75</span><span class="p">,:],</span> <span class="s">'b-'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'Exact'</span><span class="p">)</span>       
<span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">U_pred</span><span class="p">[</span><span class="mi">75</span><span class="p">,:],</span> <span class="s">'r--'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">'Prediction'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'$x$'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'$u(t,x)$'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'square'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.1</span><span class="p">,</span><span class="mf">1.1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="o">-</span><span class="mf">1.1</span><span class="p">,</span><span class="mf">1.1</span><span class="p">])</span>    
<span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'$t = 0.75$'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="p">([</span><span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">,</span> <span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">,</span> <span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">]</span> <span class="o">+</span>
             <span class="n">ax</span><span class="p">.</span><span class="n">get_xticklabels</span><span class="p">()</span> <span class="o">+</span> <span class="n">ax</span><span class="p">.</span><span class="n">get_yticklabels</span><span class="p">()):</span>
    <span class="n">item</span><span class="p">.</span><span class="n">set_fontsize</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>


</code></pre></div></div>
:ET